网页打印为pdf

git for windows镜像下载：
https://github.com/waylau/git-for-win

  git config --global user.email "zhangxp147@qq.com"
  git config --global user.name "zhangyun007"
  
进入项目根目录下：
git add *
git commit -a
git push

test3ds123

目录结构

3P/			Python3，Php，Perl程序
Lua53/ 		Lua程序
Node/		Node.js程序
Fly/		C++/STL程序，用visual studio c++(cl.exe)编译。
Linux
	

C:\Windows\System32\drivers\etc\hosts文件，修改后能连上大部分国外网站：
https://raw.githubusercontent.com/racaljk/hosts/master/hosts



程序设计语言的几个重要元素：


一、类型系统。
	
	静态类型还是动态类型？C,Java是静态类型，变量需要先声明，再使用；Python, Bash, Php是动态类型，变量直接使用。
	
二、数组及复杂数据结构

	数组，链表，哈希数组，平衡树结构等等。C/C++复杂数据结构是通过语言库STL来实现；并不是语言核心，而Python Php等复杂数据结构则是语言核心。我认为C/C++应该向Python学习，复杂数据结构不应作为库，而是应该作为语言核心。
		
三、条件和循环语句。
	
	If for while 各个语言大同小异。 
		
四、函数

	函数是程序设计语言的重要元素。能否递归，能否把函数赋给变量使用，能否用匿名函数lambda？

五、类

	主要起封装作用。把数据和相关的函数封装在一起，便于查找，修改和维护。类能否继承？ 
	
六、自动内存回收？
	
	C/C++申请内存，使用完成后，需要自己释放。malloc/free new/delete。其他大多语言不需要手动回收。
	
七、泛型编程

	C++这类静态类型语言，应当有泛型编程元素，在C++里表现为模板template，有模板函数和类模板。
	

	
想明白，哪些部分是语言核心，哪些部分作为外围的库函数或者类库。

程序设计语言的抽象语法树(AST)，在Python语言中，可以用一个dict字典数据结构表示，我们需要为每一颗树（的根节点）取一个key名字，比如整个程序的key定为"program"，那么该字典即{"program":{...}}，这样，我们很容易写出一个解释器，读入程序源文件后，得到抽象语法树，也就是得到该字典数据结构，以后的一切优化，就在这该典数据结构上进行。

C++11里，用什么数据结构存储AST呢？似乎可以用unorder_map。

